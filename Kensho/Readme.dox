/**
\mainpage
 Observable = data
 ObservableArray = array
 ObservableMap = dictionary

CalculatedObservable = data
ProxyArray = array
ProxyMap = dictionary

LuaObservable = CalculatedObservable -> mapped parameters from lua script
ParameterObservable = CalculatedObservable from mapped parameter -> data


\todo Simplify Observable (No need for number, string, etc?)    [Done]
\todo Create a KenshoContext to track __parent and __root       [Done]
\todo Make LuaWrapper basically independant, and processing bindings should create a Calculated. [Mostly Done]
\todo Rename CalculatedObservable to Computed   [Done]
\todo LuaWrapper must handle tables -> dictionaries [Done]
\todo Bindings should take a simple variable to bind to, or a complex config object [Mostly Done]
\todo LuaWrapper should handle __parent and __root in bindings [Done]
\todo Remove unneeded tests
\todo Update and add test coverage
\todo Events? Particularly post-render events for 'foreach', or the like?
\todo Clean up ObservableArray, ProxyObservableArray, and Map variations.  Maybe just rename ComputedArray too.
\todo Bindings need to get a computed (the luawrapper) and then handle the result as either a 
    value or an observable in and of itself

\todo Figure out how arrays are handled when they could be in an observablearray, an array in an observable, 
    a result of a computed, or a ComputedArray.  For example, tableview foreach binding is a good use case.  It needs
    to track the events of the array, so it expects an observablearray.  However, coming from the LuaWrapper evaluation,
    it is just a regular Computed, so it doesn't expose the same events.  How can we pass through those events?  We could assign
    attached data to each object, like 'observableowner', and then for any value see if we can get an obserbableowner and bind to
    that instead.  However, that's still only true in the case of a real pass-through.  To get a generalized solution, we may need 
    to have Observables / Computed values check the prior array value vs the new array value and generate add / remove / move 
    events.  In this scenario, we wouldn't necessarly need ObservableArrays?  Maybe see how knockout does it... because they do have
    observable arrays and their pattern generally matches our own.  Although they may not worry about it with a foreach??
    May need a way to specify a key identifier situation...

 */